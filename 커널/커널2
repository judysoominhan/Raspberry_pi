pi@raspberrypi:~$ cd /usr/src/linux/arch/arm/include/uapi/asm/
pi@raspberrypi:/usr/src/linux/arch/arm/include/uapi/asm $ sudo vi unistd.h 

#define __NR_bpf                        (__NR_SYSCALL_BASE+386)
#define __NR_execveat                   (__NR_SYSCALL_BASE+387)
#define __NR_helloworld                 (__NR_SYSCALL_BASE+388)
#define __NR_add                        (__NR_SYSCALL_BASE+389)
------------
pi@raspberrypi:~$ cd /usr/include/arm-linux-gnueabihf/asm/
pi@raspberrypi:/usr/include/arm-linux-gnueabihf/asm $ sudo vi unistd.h 

#define __NR_memfd_create               (__NR_SYSCALL_BASE+385)
#define __NR_helloworld                 (__NR_SYSCALL_BASE+388)
#define __NR_add                        (__NR_SYSCALL_BASE+389)

-----------
pi@raspberrypi:~$ cd /usr/src/linux/arch/arm/kernel/
pi@raspberrypi:/usr/src/linux/arch/arm/kernel $ sudo vi calls.S 

/* 385 */       CALL(sys_memfd_create)
                CALL(sys_bpf)
                CALL(sys_execveat)
                CALL(sys_helloworld)
                CALL(sys_add)

------------
pi@raspberrypi:~$ cd /usr/src/linux/include/linux/
pi@raspberrypi:/usr/src/linux/include/linux $ sudo vi syscalls.h 

asmlinkage long sys_execveat(int dfd, const char __user *filename,
                        const char __user *const __user *argv,
                        const char __user *const __user *envp, int flags);

asmlinkage long sys_helloworld(void);
asmlinkage long sys_add(int a, int b, int *res);

#endif

--------
pi@raspberrypi:~$ cd /usr/src/linux/kernel/
pi@raspberrypi:/usr/src/linux/kernel $ sudo vi Makefile 

#
# Makefile for the linux kernel.
#

obj-y     = fork.o exec_domain.o panic.o \
            cpu.o exit.o softirq.o resource.o \
            sysctl.o sysctl_binary.o capability.o ptrace.o user.o \
            signal.o sys.o kmod.o workqueue.o pid.o task_work.o \
            extable.o params.o \
            kthread.o sys_ni.o nsproxy.o \
            notifier.o ksysfs.o cred.o reboot.o \
            async.o range.o smpboot.o helloworld.o add.o

